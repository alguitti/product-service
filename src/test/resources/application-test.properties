spring.application.name=productservice
server.port=8082
kafka.server=${spring.embedded.kafka.brokers}
kafka.topic=products-created-events-topic
kafka.delivery-timeout=1000
kafka.request-timeout=500
kafka.acks=all
kafka.linger=0
#acks must be all and max in flight requests must greater than 0 and less than 5
kafka.idempotence-enabled=true
kafka.max-inflight-requests=5
kafka.transaction-id=product-service-${random.value}-

kafka.group-id=test-group
kafka.trusted=*
kafka.auto-offset-reset=earliest
#   Se for uma lista, se o primeiro cair o segundo broker assume
#spring.kafka.producer.bootstrap-servers=localhost:9092, localhost:9094

#   Se a chave for de outro tipo que nao String, o Serializador deve estar de acorod com o tipo
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Acknoledgement Section
# all -> waits acknoledgement from all brokers
# 1 -> waits from 1
# 0 -> does not wait
# ---------------------------------------
# when all waitis all brokers that are in sync replicas.
# the more in sync replicas acks, the more reliable the messaging gets, but slower as well
#teste with --min-insync-replicas = 2 , --replication-factor = 3,  --partitions = 3
#spring.kafka.producer.acks=all

# the default number of attempts when the producing fails is 2147483647 or up to 2 minutes
#spring.kafka.producer.retries=10

# the time between attempts confiogured above
#spring.kafka.producer.properties.retry.backoff.ms=1000

#recommended configs
#the maximum time producer will for the entire process
#spring.kafka.producer.properties.delivery.timeout.ms=120000

#the maximum the producer will wait to send
#spring.kafka.producer.properties.linger.ms=0

#producer will wait for response from broker after sending the message and gettting the first ack
#spring.kafka.producer.properties.request.timeout.ms=30000


